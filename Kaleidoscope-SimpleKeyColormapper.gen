#include "Kaleidoscope-SimpleKeyColormapper.h"
#include "Kaleidoscope.h"
namespace kaleidoscope {
namespace plugin {

bool SimpleKeyColormapper_::cleanupDone = true;
uint8_t SimpleKeyColormapper_::ActiveLayer;

void  SimpleKeyColormapper_::ledeffectlayer1(){
}
void  SimpleKeyColormapper_::ledeffectlayer2(){
}
void  SimpleKeyColormapper_::ledeffectlayer3(){
}
void  SimpleKeyColormapper_::ledeffectlayer4(){
}
void  SimpleKeyColormapper_::ledeffectlayer5(){
}
void  SimpleKeyColormapper_::ledeffectlayer6(){
}
void  SimpleKeyColormapper_::ledeffectlayer7(){
}
void  SimpleKeyColormapper_::ledeffectlayer8(){
}
void  SimpleKeyColormapper_::ledeffectlayer9(){
}
EventHandlerResult SimpleKeyColormapper_::onSetup(void) {
  return EventHandlerResult::OK;
}
EventHandlerResult SimpleKeyColormapper_::afterEachCycle() {

  ActiveLayer =	Layer.mostRecent();
   if (ActiveLayer ==0	){
    if (!cleanupDone) {
      ::LEDControl.set_mode(::LEDControl.get_mode_index());
      cleanupDone = true;
    }
  return EventHandlerResult::OK;
  }


  cleanupDone = false;
  ::LEDControl.set_mode(::LEDControl.get_mode_index());
  Serial.println(ActiveLayer);
      for(auto key_addr : KeyAddr::all()){
	Key k = Layer.lookupOnActiveLayer(key_addr);
      Key layer_key = Layer.getKey(ActiveLayer, key_addr);

      if (k == LockLayer(ActiveLayer)) {
      }

      if (k != layer_key)  { ::LEDControl.refreshAt(key_addr); }
		else {
       		switch(ActiveLayer)
				{
			case 1:	ledeffectlayer1();
						break;
			case 2:	ledeffectlayer2();
						break;

			case 3:	ledeffectlayer3();
						break;
			case 4:	ledeffectlayer4();
						break;
			case 5:	ledeffectlayer5();
						break;
			case 6:	ledeffectlayer6();
						break;
			case 7:	ledeffectlayer7();
						break;
			case 8:	ledeffectlayer8();
						break;
			case 9:	ledeffectlayer9();
						break;
				}
      		 }
    	}
  

  return EventHandlerResult::OK;

}
}
}



  kaleidoscope::plugin::SimpleKeyColormapper_ SimpleKeyColormapper;










