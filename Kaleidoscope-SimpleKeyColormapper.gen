#include "Kaleidoscope-SimpleKeyColormapper.h"
#include "LEDUtils.h"
#include "Kaleidoscope.h"
#include "layers.h"

byte SimpleKeyColormapper_::row = 255, SimpleKeyColormapper_::col = 255;
bool SimpleKeyColormapper_::cleanupDone = true;
uint8_t SimpleKeyColormapper_::ActiveLayer;

void  SimpleKeyColormapper_::ledeffectlayer1(uint8_t r,uint8_t c,Key k  ){
}

void  SimpleKeyColormapper_::ledeffectlayer2(uint8_t r,uint8_t c, Key k ){
}

void  SimpleKeyColormapper_::ledeffectlayer3(uint8_t r,uint8_t c ,Key k ) {
}

void  SimpleKeyColormapper_::ledeffectlayer4(uint8_t r,uint8_t c ,Key k ) {
}
void  SimpleKeyColormapper_::ledeffectlayer5(uint8_t r,uint8_t c ,Key k ) {
}
void  SimpleKeyColormapper_::ledeffectlayer6(uint8_t r,uint8_t c ,Key k ) {
}
void  SimpleKeyColormapper_::ledeffectlayer7(uint8_t r,uint8_t c ,Key k ) {
}
void  SimpleKeyColormapper_::ledeffectlayer8(uint8_t r,uint8_t c ,Key k ) {
}

void  SimpleKeyColormapper_::ledeffectlayer9(uint8_t r,uint8_t c ,Key k ) {
}
void SimpleKeyColormapper_::begin(void) {
  Kaleidoscope.useLoopHook(loopHook);
}
void SimpleKeyColormapper_::loopHook(bool postClear) {
  if (!postClear)
    return;

  ActiveLayer =	Layer.top();
   if (ActiveLayer ==0	){
    if (!cleanupDone) {
      LEDControl.set_mode(LEDControl.get_mode_index());
      cleanupDone = true;
    }
    return;
  }


  cleanupDone = false;
  LEDControl.set_mode(LEDControl.get_mode_index());
  Serial.println(ActiveLayer);
  for (uint8_t r = 0; r < ROWS; r++) {
    for (uint8_t c = 0; c < COLS; c++) {
      Key k = Layer.lookupOnActiveLayer(r, c);
      Key layer_key = Layer.getKey(ActiveLayer, r, c);

      if (k == LockLayer(ActiveLayer)) {
        row  = r;
        col = c;
      }

      if (k != layer_key)  { LEDControl.refreshAt(r, c); }
		else {
       		switch(ActiveLayer)
				{
			case 1:	ledeffectlayer1(r,c,k);
						break;
			case 2:	ledeffectlayer2(r,c,k);
						break;

			case 3:	ledeffectlayer3(r,c,k);
						break;
			case 4:	ledeffectlayer4(r,c,k);
						break;
			case 5:	ledeffectlayer5(r,c,k);
						break;
			case 6:	ledeffectlayer6(r,c,k);
						break;
			case 7:	ledeffectlayer7(r,c,k);
						break;
			case 8:	ledeffectlayer8(r,c,k);
						break;
			case 9:	ledeffectlayer9(r,c,k);
						break;
				}
      		 }
    	}
  }

  if (row > ROWS || col > COLS)
    return;

}




  SimpleKeyColormapper_ SimpleKeyColormapper;




